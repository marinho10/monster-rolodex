{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","Search","handleOnChange","type","placeholder","onChange","App","handleChange","e","setState","search","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAGaA,EAAO,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAClB,sBAAKC,UAAU,iBAAf,UACE,qBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,0BAA8DC,IAAG,kBAAaJ,EAAQG,MAC9F,6BAAKH,EAAQK,OACb,4BAAIL,EAAQM,YCFHC,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACtB,qBAAKP,UAAU,YAAf,SACGO,EAASC,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,UCLZO,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAH,OAAwB,uBAAOV,UAAU,SAASW,KAAK,SAASC,YAAY,kBAAkBC,SAAUH,MCmC/GI,E,kDAhCb,aAAe,IAAD,8BACZ,gBAaFC,aAAe,SAACC,GACd,EAAKC,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,SAbjC,EAAKC,MAAQ,CACXd,SAAU,GACVW,OAAQ,IAJE,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAEV,SAAUmB,S,oBAO/C,WAAU,IAAD,EACsBC,KAAKN,MAA1Bd,EADD,EACCA,SAAUW,EADX,EACWA,OACZU,EAAmBrB,EAASsB,QAAO,SAAC9B,GAAD,OAAaA,EAAQK,KAAK0B,cAAcC,SAASb,EAAOY,kBAEjG,OACE,sBAAK9B,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,cAAC,EAAD,CAAQU,eAAgBiB,KAAKZ,eAC7B,cAAC,EAAD,CAAUR,SAAUqB,W,GA3BVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.49d01318.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.styles.css\";\n\nexport const Card = ({ monster }) => (\n  <div className=\"card-container\">\n    <img src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} alt={`monster ${monster.id}`} />\n    <h1>{monster.name}</h1>\n    <p>{monster.email}</p>\n  </div>\n);\n","import React from \"react\";\nimport \"./card-list.styles.css\";\n\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = ({ monsters }) => (\n  <div className=\"card-list\">\n    {monsters.map((monster) => (\n      <Card key={monster.id} monster={monster} />\n    ))}\n  </div>\n);\n","import React from \"react\";\nimport \"./search.styles.css\";\n\nexport const Search = ({ handleOnChange }) => <input className=\"search\" type=\"search\" placeholder=\"Search monsters\" onChange={handleOnChange} />;\n","import \"./App.css\";\nimport { Component } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { Search } from \"./components/search/search.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      search: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ search: e.target.value });\n  };\n\n  render() {\n    const { monsters, search } = this.state;\n    const filteredMonsters = monsters.filter((monster) => monster.name.toLowerCase().includes(search.toLowerCase()));\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"title\">Monsters Rolodex</h1>\n        <Search handleOnChange={this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}